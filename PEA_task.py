import streamlit as st
import pandas as pd
import requests
from collections import Counter
from io import StringIO
import re
from ftfy import fix_text  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ mojibake

# üîÅ ‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Google Sheet ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå CSV
def convert_to_csv_url(google_sheet_url):
    try:
        match = re.search(r'/d/([a-zA-Z0-9-_]+)', google_sheet_url)
        sheet_id = match.group(1)
        gid_match = re.search(r'gid=([0-9]+)', google_sheet_url)
        gid = gid_match.group(1) if gid_match else '0'
        return f'https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}'
    except:
        return None

# üì• ‡πÇ‡∏´‡∏•‡∏î Google Sheet ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ encoding ‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô
def read_google_sheet(sheet_url):
    csv_url = convert_to_csv_url(sheet_url)
    try:
        response = requests.get(csv_url)
        response.raise_for_status()

        df_raw = pd.read_csv(
            StringIO(response.text),
            encoding="utf-8",
            header=None,
            engine="python"
        )

        df_raw.columns = ["‡πÄ‡∏ß‡∏•‡∏≤", "‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥"]
        df_clean = df_raw.drop(index=[0, 1]).reset_index(drop=True)

        st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÉ‡∏ä‡πâ engine='python' + ftfy ‡πÅ‡∏Å‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô")
        return df_clean

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None

# ============================
# üéØ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ Streamlit
# ============================
st.title("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏≥")

sheet_url = st.text_input("üîó ‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Google Sheet ‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå‡πÅ‡∏ö‡∏ö Anyone (Viewer)")

if sheet_url:
    df = read_google_sheet(sheet_url)

    if df is not None:
        emp_id = st.text_input("üîç ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

        if emp_id:
            df_emp = df[df["‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"].astype(str) == emp_id]

            if df_emp.empty:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            else:
                all_tasks = []
                # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å row
                for row in df_emp["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥"].dropna():
                    row = fix_text(row)
                    # ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ re.split ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö comma ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
                    tasks = [t.strip() for t in re.split(r'\s*,\s*', row) if t.strip()]
                    all_tasks.extend(tasks)

                # ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô
                count = Counter(all_tasks)

                st.subheader(f"‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™ {emp_id} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {sum(count.values())} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                st.dataframe(
                    pd.DataFrame(count.items(), columns=["‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á"])
                    .sort_values(by="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ascending=False)
                )
